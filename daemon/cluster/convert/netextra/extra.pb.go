// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: extra.proto

package netextra

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetNetworkExtraOptions struct {
	WithIPAMStatus bool `protobuf:"varint,1,opt,name=WithIPAMStatus,proto3" json:"WithIPAMStatus,omitempty"`
}

func (m *GetNetworkExtraOptions) Reset()         { *m = GetNetworkExtraOptions{} }
func (m *GetNetworkExtraOptions) String() string { return proto.CompactTextString(m) }
func (*GetNetworkExtraOptions) ProtoMessage()    {}
func (*GetNetworkExtraOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_b57530d56b910c1d, []int{0}
}
func (m *GetNetworkExtraOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkExtraOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkExtraOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkExtraOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkExtraOptions.Merge(m, src)
}
func (m *GetNetworkExtraOptions) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkExtraOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkExtraOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkExtraOptions proto.InternalMessageInfo

func (m *GetNetworkExtraOptions) GetWithIPAMStatus() bool {
	if m != nil {
		return m.WithIPAMStatus
	}
	return false
}

type Extra struct {
	IPAMStatus []*IPAMStatus `protobuf:"bytes,1,rep,name=IPAMStatus,proto3" json:"IPAMStatus,omitempty"`
}

func (m *Extra) Reset()         { *m = Extra{} }
func (m *Extra) String() string { return proto.CompactTextString(m) }
func (*Extra) ProtoMessage()    {}
func (*Extra) Descriptor() ([]byte, []int) {
	return fileDescriptor_b57530d56b910c1d, []int{1}
}
func (m *Extra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Extra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Extra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extra.Merge(m, src)
}
func (m *Extra) XXX_Size() int {
	return m.Size()
}
func (m *Extra) XXX_DiscardUnknown() {
	xxx_messageInfo_Extra.DiscardUnknown(m)
}

var xxx_messageInfo_Extra proto.InternalMessageInfo

func (m *Extra) GetIPAMStatus() []*IPAMStatus {
	if m != nil {
		return m.IPAMStatus
	}
	return nil
}

type IPAMStatus struct {
	Subnet              []byte `protobuf:"bytes,1,opt,name=Subnet,proto3" json:"Subnet,omitempty"`
	IPsInUse            uint64 `protobuf:"varint,2,opt,name=IPsInUse,proto3" json:"IPsInUse,omitempty"`
	DynamicIPsAvailable uint64 `protobuf:"varint,3,opt,name=DynamicIPsAvailable,proto3" json:"DynamicIPsAvailable,omitempty"`
}

func (m *IPAMStatus) Reset()         { *m = IPAMStatus{} }
func (m *IPAMStatus) String() string { return proto.CompactTextString(m) }
func (*IPAMStatus) ProtoMessage()    {}
func (*IPAMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b57530d56b910c1d, []int{2}
}
func (m *IPAMStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPAMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPAMStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPAMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAMStatus.Merge(m, src)
}
func (m *IPAMStatus) XXX_Size() int {
	return m.Size()
}
func (m *IPAMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IPAMStatus proto.InternalMessageInfo

func (m *IPAMStatus) GetSubnet() []byte {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (m *IPAMStatus) GetIPsInUse() uint64 {
	if m != nil {
		return m.IPsInUse
	}
	return 0
}

func (m *IPAMStatus) GetDynamicIPsAvailable() uint64 {
	if m != nil {
		return m.DynamicIPsAvailable
	}
	return 0
}

func init() {
	proto.RegisterType((*GetNetworkExtraOptions)(nil), "docker.engine.netextra.GetNetworkExtraOptions")
	proto.RegisterType((*Extra)(nil), "docker.engine.netextra.Extra")
	proto.RegisterType((*IPAMStatus)(nil), "docker.engine.netextra.IPAMStatus")
}

func init() { proto.RegisterFile("extra.proto", fileDescriptor_b57530d56b910c1d) }

var fileDescriptor_b57530d56b910c1d = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xad, 0x28, 0x29,
	0x4a, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4b, 0xc9, 0x4f, 0xce, 0x4e, 0x2d, 0xd2,
	0x4b, 0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0xd5, 0xcb, 0x4b, 0x2d, 0x01, 0xcb, 0x2a, 0x39, 0x70, 0x89,
	0xb9, 0xa7, 0x96, 0xf8, 0xa5, 0x96, 0x94, 0xe7, 0x17, 0x65, 0xbb, 0x82, 0x84, 0xfc, 0x0b, 0x4a,
	0x32, 0xf3, 0xf3, 0x8a, 0x85, 0xd4, 0xb8, 0xf8, 0xc2, 0x33, 0x4b, 0x32, 0x3c, 0x03, 0x1c, 0x7d,
	0x83, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x82, 0xd0, 0x44, 0x95,
	0xbc, 0xb9, 0x58, 0xc1, 0xfa, 0x84, 0x9c, 0xb8, 0xb8, 0x50, 0x14, 0x33, 0x6b, 0x70, 0x1b, 0x29,
	0xe9, 0x61, 0xb7, 0x57, 0x0f, 0xa1, 0x32, 0x08, 0x49, 0x97, 0x52, 0x11, 0xb2, 0x19, 0x42, 0x62,
	0x5c, 0x6c, 0xc1, 0xa5, 0x49, 0x79, 0xa9, 0x25, 0x60, 0xab, 0x79, 0x82, 0xa0, 0x3c, 0x21, 0x29,
	0x2e, 0x0e, 0xcf, 0x80, 0x62, 0xcf, 0xbc, 0xd0, 0xe2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96,
	0x20, 0x38, 0x5f, 0xc8, 0x80, 0x4b, 0xd8, 0xa5, 0x32, 0x2f, 0x31, 0x37, 0x33, 0xd9, 0x33, 0xa0,
	0xd8, 0xb1, 0x2c, 0x31, 0x33, 0x27, 0x31, 0x29, 0x27, 0x55, 0x82, 0x19, 0xac, 0x0c, 0x9b, 0x94,
	0x93, 0xd2, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1,
	0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xc0, 0x9c, 0x9b,
	0xc4, 0x06, 0x0e, 0x45, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x0a, 0xcc, 0xc8, 0x54,
	0x01, 0x00, 0x00,
}

func (m *GetNetworkExtraOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkExtraOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkExtraOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithIPAMStatus {
		i--
		if m.WithIPAMStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Extra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IPAMStatus) > 0 {
		for iNdEx := len(m.IPAMStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IPAMStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExtra(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IPAMStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPAMStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DynamicIPsAvailable != 0 {
		i = encodeVarintExtra(dAtA, i, uint64(m.DynamicIPsAvailable))
		i--
		dAtA[i] = 0x18
	}
	if m.IPsInUse != 0 {
		i = encodeVarintExtra(dAtA, i, uint64(m.IPsInUse))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Subnet) > 0 {
		i -= len(m.Subnet)
		copy(dAtA[i:], m.Subnet)
		i = encodeVarintExtra(dAtA, i, uint64(len(m.Subnet)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtra(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtra(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetNetworkExtraOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithIPAMStatus {
		n += 2
	}
	return n
}

func (m *Extra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IPAMStatus) > 0 {
		for _, e := range m.IPAMStatus {
			l = e.Size()
			n += 1 + l + sovExtra(uint64(l))
		}
	}
	return n
}

func (m *IPAMStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subnet)
	if l > 0 {
		n += 1 + l + sovExtra(uint64(l))
	}
	if m.IPsInUse != 0 {
		n += 1 + sovExtra(uint64(m.IPsInUse))
	}
	if m.DynamicIPsAvailable != 0 {
		n += 1 + sovExtra(uint64(m.DynamicIPsAvailable))
	}
	return n
}

func sovExtra(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtra(x uint64) (n int) {
	return sovExtra(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetNetworkExtraOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkExtraOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkExtraOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIPAMStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithIPAMStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExtra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAMStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAMStatus = append(m.IPAMStatus, &IPAMStatus{})
			if err := m.IPAMStatus[len(m.IPAMStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtra
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExtra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = append(m.Subnet[:0], dAtA[iNdEx:postIndex]...)
			if m.Subnet == nil {
				m.Subnet = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPsInUse", wireType)
			}
			m.IPsInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPsInUse |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicIPsAvailable", wireType)
			}
			m.DynamicIPsAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DynamicIPsAvailable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExtra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtra(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtra
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtra
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtra
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtra
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtra        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtra          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtra = fmt.Errorf("proto: unexpected end of group")
)
